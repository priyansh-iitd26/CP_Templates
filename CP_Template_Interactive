#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define ld long double
#define MOD 1000000007
/*-----------------------------------------------------------------------------------------*/
ll gcd(ll a, ll b) {if (b > a) {return gcd(b, a);} if (b == 0) {return a;} return gcd(b, a % b);}
vector<ll> sieve(int n) {int*arr = new int[n + 1](); vector<ll> vect; for (int i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (int j = 2 * i; j <= n; j += i)arr[j] = 1;} return vect;}
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
ll getRandomNumber(ll l, ll r) {return uniform_int_distribution<ll>(l, r)(rng);}
/*-----------------------------------------------------------------------------------------*/
struct Interactor {
    //ll hiddenNumber;
    bool testing;
    int queriesSoFar;
    //int limitQueries = 20;

    Interactor(ll hiddenNumber, bool testing) {
        //this->hiddenNumber = hiddenNumber;
        queriesSoFar = 0;
        this->testing = testing;
    }

    string queryInteractor(ll x) {
        assert(queriesSoFar < limitQueries);
        queriesSoFar++;
        // if(hiddenNumber % x == 0)
        //     return "yes";
        // else
        //     return "no";
    }
};
/*-----------------------------------------------------------------------------------------*/
string query(ll x, Interactor &it) {
    cout << x << endl;
    string output;
    if(it.testing) {
        output = it.queryInteractor(x);
        cout << "Interactor Output: " << output << endl;
    } else {
        cin >> output;
    }
    return output;
}
void solve() {
    
    // vector<ll> toCheck = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 4, 9, 25, 49};

    // Interactor it(49, false); //##########FOCUS HERE#############
    // int iterations = 20;

    // int cnt = 0;
    // string ans = "prime";

    for(int i = 0; i < iterations; i++) {
        // ll x = toCheck[i];
        // string result = query(x, it);
        // if(result == "yes") {
        //     cnt++;
        //     if(cnt > 1) {
        //         ans = "composite";
        //         break;
        //     }
        // }
    }

    cout << ans << endl;
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    solve();
    return 0;
}
